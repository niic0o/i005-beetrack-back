generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_LOCAL")
}

model User {
  id            String      @id @default(uuid())
  name          String
  last_name     String
  email         String      @unique
  password      String
  status        Status      @default(ACTIVE)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  birthdate     DateTime
  avatar        String?
  cloudinary_id String?
  userRole      UserRole    @default(ADMIN)
  userStores    UserStore[]
}

model UserStore {
  id      String @id @default(uuid())
  userId  String
  storeId String
  store   Store  @relation(fields: [storeId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@unique([userId, storeId])
}

model Store {
  id          String        @id @default(uuid())
  name        String
  address     String
  status      Status        @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  tel         String?
  dailyReport DailyReport[]
  orders      Order[]
  products    Product[]
  userStores  UserStore[]
}

model Product {
  id            String        @id @default(uuid())
  barcode       String
  name          String
  stock         Int
  description   String?
  storeId       String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  costPrice     Decimal       @db.Decimal(9, 2)
  imagePath     String?
  salesPrice    Decimal       @db.Decimal(9, 2)
  status        ProductStatus @default(LIMITED)
  is_active     Boolean       @default(true)
  stock_min     Int
  stock_optimus Int
  cloudinary_id String?
  alerts        Boolean       @default(true)
  orderItems    OrderLines[]
  store         Store         @relation(fields: [storeId], references: [id])

  @@unique([storeId, barcode])
}

model Order {
  id             String       @id @default(uuid())
  totalAmount    Decimal      @db.Decimal(10, 2)
  status         OrderStatus  @default(PENDING)
  storeId        String
  paymentId      String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  discountID     String?
  pdfPath        String?
  subTotalAmount Decimal      @db.Decimal(10, 2)
  cloudinary_id  String?
  discount       Discount?    @relation(fields: [discountID], references: [id])
  payment        Payment?     @relation(fields: [paymentId], references: [id])
  store          Store        @relation(fields: [storeId], references: [id])
  orderItems     OrderLines[]
}

model Discount {
  id          String   @id @default(uuid())
  description String?
  rate        Decimal  @db.Decimal(5, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
}

model Payment {
  id     String        @id @default(uuid())
  name   PaymentMethod @default(CASH)
  orders Order[]
}

model OrderLines {
  id              String  @id @default(uuid())
  orderId         String
  productId       String
  quantity        Int
  totalSalesPrice Decimal @db.Decimal(9, 2)
  order           Order   @relation(fields: [orderId], references: [id])
  product         Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
}

model DailyReport {
  id                  String   @id @default(uuid())
  totalOrders         Int      @default(0)
  totalProductsSold   Int      @default(0)
  totalSales          Decimal  @default(0.0) @db.Decimal(13, 2)
  totalCost           Decimal  @default(0.0) @db.Decimal(13, 2)
  totalCashSales      Decimal  @default(0.0) @db.Decimal(13, 2)
  totalCardSales      Decimal  @default(0.0) @db.Decimal(13, 2)
  totalDigitalSales   Decimal  @default(0.0) @db.Decimal(13, 2)
  totalProfit         Decimal  @db.Decimal(13, 2)
  bestSellingProduct  String?
  leastSellingProduct String?
  storeId             String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  store               Store    @relation(fields: [storeId], references: [id])
}

enum Status {
  ACTIVE
  BLOCKED
}

enum PaymentMethod {
  CARD
  DIGITAL
  CASH
}

enum OrderStatus {
  PAID
  PENDING
  CANCELED
}

enum ProductStatus {
  AVAILABLE
  LIMITED
  SOLDOUT
  OPTIMUM
}

enum UserRole {
  ADMIN
  SELLER
  STOCKER
  ACCOUNTANT
}
